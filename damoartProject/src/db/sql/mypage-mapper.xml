<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

	<!-- 예매 내역 페이징바 -->
	<entry key="selectReListCount">
	  SELECT
		     COUNT(*) count
	    FROM ORDER_P
        JOIN "ORDER" USING(ORDER_NO)
	   WHERE ORDER_STATUS = 'P'
         AND MEM_NO = ?
	</entry>
	<!-- 예매 내역 -->
	<entry key="selectReserve">
		SELECT 
		       MEM_NO
		     , ORDER_NO
		     , FINAL_PRICE
		     , ORDER_DATE
		     , PNO
		     , TITLE
		     , MAIN_IMG
		     , ORDER_OPT
		     , ORDER_COUNT
		     , ORDER_STATUS
		  FROM "ORDER" 
		  JOIN ORDER_P USING(ORDER_NO)
		  JOIN PRODUCT USING(PNO)
		 WHERE MEM_NO = ?
		   AND (ORDER_STATUS = 'W' OR ORDER_STATUS = 'P' OR ORDER_STATUS = 'O')
		 ORDER
    		BY ORDER_DATE DESC
	</entry>
	
	<!-- 예매 상세 -->
	<entry key="selectReserveDetail">
		SELECT 
		       ORDER_NO 
		     , ORDER_DATE 
		     , ORDER_NAME
		     , PNO
		     , TITLE
		     , MAIN_IMG
		     , ORDER_OPT
		     , ORDER_COUNT
		     , AREA
		     , PAY_DATE
		     , PAY_OPT
		     , PAY_PRICE
		     , ORDER_PHONE
		  FROM "ORDER" 
		  JOIN ORDER_P USING(ORDER_NO)
		  JOIN PRODUCT USING(PNO)
		  JOIN PAY USING(ORDER_NO)
		 WHERE MEM_NO = ?
		   AND (ORDER_STATUS = 'W' OR ORDER_STATUS = 'P' OR ORDER_STATUS = 'O')
		 ORDER
		    BY ORDER_DATE DESC
	</entry>
	
	<!-- 취소/환불 내역 -->
	<entry key="selectRefund">
		SELECT 
		       MEM_NO
		     , ORDER_NO
		     , FINAL_PRICE
		     , ORDER_DATE
		     , PNO
		     , TITLE
		     , MAIN_IMG
		     , ORDER_OPT
		     , ORDER_COUNT
		     , ORDER_STATUS
		  FROM "ORDER" 
		  JOIN ORDER_P USING(ORDER_NO)
		  JOIN PRODUCT USING(PNO)
		 WHERE MEM_NO = ?
		   AND (ORDER_STATUS = 'C' OR ORDER_STATUS = 'CC' OR ORDER_STATUS = 'N')
		 ORDER
		    BY ORDER_DATE DESC
	</entry>
	
	<!-- 취소/환불 상세 -->
	<entry key="selectRefundDetail">
			SELECT 
		       ORDER_NO 
		     , ORDER_DATE 
		     , ORDER_NAME
		     , PNO
		     , TITLE
		     , MAIN_IMG
		     , ORDER_OPT
		     , ORDER_COUNT
		     , AREA
		     , PAY_DATE
		     , PAY_OPT
		     , PAY_PRICE
		     , ORDER_PHONE
             , BANK_NAME
             , REFUND_ACCOUNT
             , REFUND_NAME
		  FROM "ORDER" 
		  JOIN ORDER_P USING(ORDER_NO)
		  JOIN PRODUCT USING(PNO)
		  JOIN PAY USING(ORDER_NO)
		 WHERE MEM_NO = ?
		   AND (ORDER_STATUS = 'CC')
		 ORDER
		    BY ORDER_DATE DESC
	</entry>
	
	<!-- 적립금 내역 -->
	<entry key="pointList">
		SELECT
		       POI_DATE
		     , POI_POINT
		     , POI_CONTENT
		     , ORDER_NO
		     , MEM_ID
		  FROM POINT
		  JOIN MEMBER USING(MEM_NO) 
		 WHERE MEM_ID = ?
	</entry>
	
	<!-- 회원 적립금 -->
	<entry key="memberPoint">
		SELECT 
		       SUM(POI_POINT) POINT
		  FROM POINT 
		  JOIN MEMBER USING(MEM_NO)
		 WHERE MEM_ID = ?
	</entry>
	
	<!-- 작성 가능한 리뷰 조회 -->
	<entry key="reviewBeforeList">
		SELECT *
		  FROM (SELECT PNO
		             , ORDER_NO
		             , TITLE
		             , MAIN_IMG
		             , ORDER_OPT
		             , TO_CHAR(ORDER_DATE, 'YYYY-MM-DD') "ORDER_DATE"
		             , TO_CHAR((ORDER_DATE + 30), 'YYYY-MM-DD') "AVADATE"
		             , MEM_NO
		          FROM ORDER_P
		          JOIN PRODUCT USING (PNO)
		          JOIN "ORDER" USING (ORDER_NO)
		         WHERE ORDER_STATUS = 'O'
		           AND MEM_NO = ?) A
		 WHERE NOT ORDER_NO IN (SELECT ORDER_NO
		                          FROM MEMBER
		                          JOIN REVIEW USING (MEM_NO)
		                         WHERE MEM_NO = ?)
	</entry>
	
	<!-- 내가 작성한 리뷰 조회 -->
	<entry key="reviewAfterList">
		SELECT 
			   RV_NO
		     , TITLE
		     , MAIN_IMG
		     , ORDER_OPT
		     , TO_CHAR(ORDER_DATE, 'YYYY-MM-DD') "ORDER_DATE"
		     , TO_CHAR((ORDER_DATE + 30), 'YYYY-MM-DD') "AVADATE"
		     , TO_CHAR(REVIEW_DATE, 'YYYY-MM-DD') "REVIEW_DATE"
		     , REVIEW_TITLE
		  FROM REVIEW R
		  JOIN ORDER_P USING (ORDER_NO)
		  JOIN PRODUCT USING (PNO) 
		  JOIN "ORDER" USING (ORDER_NO)
		 WHERE R.MEM_NO = ?
		 ORDER 
		    BY ORDER_DATE DESC
	</entry>
	
	<!-- qna 내역 -->
	<entry key="memberQnaList">
		SELECT
		       Q_NO
		     , TITLE
		     , Q_WRITER
		     , SECRET
		     , Q_TITLE
		     , Q_CONTENT
		     , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') "CREATE_DATE"
		     , Q_CATEGORY_CODE
		     , A_CONTENT
		     , A_CREATE_DATE
		     , NICKNAME
		  FROM QNA Q
		  LEFT JOIN PRODUCT USING (PNO)
		  LEFT JOIN MEMBER M ON (Q.MEM_NO2 = M.MEM_NO)
		 WHERE Q_WRITER = ?
		   AND Q.STATUS = 'Y'
	</entry>
	
	<!-- qna 수정을 위한 번호 -->
	<entry key="memberQna">
		SELECT
		       Q_NO
		     , Q_WRITER
		  FROM QNA 
		 WHERE Q_WRITER = ?
		   AND STATUS = 'Y'
	</entry>
	
	<!-- qna 수정 -->
	<entry key="updateQna">
		UPDATE 
		       QNA
		   SET STATUS = 'N'
		 WHERE Q_NO = ?
	</entry>

	<!-- 회원정보 수정 -->
	<entry key="updateMember">
		UPDATE MEMBER
		   SET MEM_PWD = ?
		   	 , MEM_NAME = ?
		     , NICKNAME = ?
		     , EMAIL = ?
		     , PHONE = ?
		     , BIRTH = ?
		 WHERE MEM_ID = ? 
	</entry>

	<!-- 회원정보 조회 -->
	<entry key="selectMember">
		SELECT 
		       MEM_NO
		     , MEM_ID
		     , MEM_PWD
		     , MEM_NAME
		     , NICKNAME
		     , EMAIL
		     , PHONE
		     , BIRTH
		     , ENROLL_DATE
		     , MEM_TYPE
		     , STATUS
		     , BLACK_CONTENT
		     , BLACK_DATE
		  FROM MEMBER
		 WHERE MEM_ID = ?
		   AND STATUS = 'N'
	</entry>
	
	<!-- 회원탈퇴(상태변경) -->
	<entry key="deleteMember">
		UPDATE MEMBER
		   SET STATUS = 'Y'
	   	 WHERE MEM_ID = ?
	</entry>

</properties>